# -wvh- nginx configuration file based on default CentOS version
#
#    - proxy to api on 8080
#    - redirect everything else to index.html
#    - configure tls
#    - set secure headers, limits and timeouts
#    - set letsencrypt path
#

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
	worker_connections 1024;
}

http {
	log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
					  '$status $body_bytes_sent "$http_referer" '
					  '"$http_user_agent" "$http_x_forwarded_for"';

	access_log  /var/log/nginx/access.log  main;

	sendfile             on;
	tcp_nopush           on;
	tcp_nodelay          on;
	keepalive_timeout    65;
	types_hash_max_size  2048;

	include              /etc/nginx/mime.types;
	default_type         application/octet-stream;

	server_tokens        off;
	client_max_body_size 1M;

	# secure headers for all vhosts
	# WARNING: nginx will override these if there are other add_header keywords in subsequent blocks!
	add_header X-Frame-Options SAMEORIGIN;
	add_header X-Content-Type-Options nosniff;
	add_header X-XSS-Protection "1; mode=block";

	# TODO: CSP
	#add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://ssl.google-analytics.com https://assets.zendesk.com https://connect.facebook.net; img-src 'self' https://ssl.google-analytics.com https://s-static.ak.facebook.com https://assets.zendesk.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://assets.zendesk.com; font-src 'self' https://themes.googleusercontent.com; frame-src https://assets.zendesk.com https://www.facebook.com https://s-static.ak.facebook.com https://tautt.zendesk.com; object-src 'none'";

	# Load modular configuration files from the /etc/nginx/conf.d directory.
	# See http://nginx.org/en/docs/ngx_core_module.html#include
	# for more information.
	include /etc/nginx/conf.d/*.conf;

	server {
		listen       80 default_server;
		listen       [::]:80 default_server;
		server_name  {{ server.fqdn }};
		root         {{ app.webpath }}/;

		# this will load letsencrypt configuration if it exists
		include /etc/nginx/default.d/*.conf;

		return 301 https://$server_name$request_uri;
	}

	upstream app {
		server 127.0.0.1:8080;
		keepalive 16;
	}

	server {
		listen       443 ssl http2 default_server;
		listen       [::]:443 ssl http2 default_server;
		server_name  _;
		root         {{ app.webpath }}/;

		# STS header only for ssl vhosts
		add_header Strict-Transport-Security "max-age=15768000; includeSubdomains; preload"; # 15768000 (6m), 7776000 (3m)

		# ssl_ciphers from Mozilla intermediate profile, which are also the ones letsencrypt uses for nginx
		# nginx default was: HIGH:!aNULL:!MD5
		ssl_certificate           "/etc/pki/web/{{server.hostname}}.crt";
		ssl_certificate_key       "/etc/pki/web/{{server.hostname}}.key";
		ssl_dhparam               /etc/pki/web/dhparam.pem;
		ssl_session_cache         shared:SSL:1m;
		ssl_session_timeout       1h; # 10m
		ssl_session_tickets       off;
		ssl_ciphers               "ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS";
		ssl_prefer_server_ciphers on;
		ssl_protocols             TLSv1 TLSv1.1 TLSv1.2;

		# OCSP stapling
		ssl_stapling on;
		ssl_stapling_verify on;
		ssl_trusted_certificate "/etc/pki/web/{{server.hostname}}.crt";
		resolver 8.8.8.8 8.8.4.4;

		# secure headers (copied; perhaps insert these into an include file instead)
		add_header X-Frame-Options SAMEORIGIN;
		add_header X-Content-Type-Options nosniff;
		add_header X-XSS-Protection "1; mode=block";

		# this will load letsencrypt configuration if it exists
		include /etc/nginx/default.d/*.conf;

		# root is web folder (unused; we rather redirect everything to the index.html that loads javascript, see below)
		#   When we open a deep path, for instance /datasets/abc123-def456-ghi789/tab1, we want nginx to show index.html
		#   instead of returning a 404 so the javascript application can take that url and do something sensible with it.
		#   Those URLs only exist in the application, where they're handled by the Vue router.
		#location / {
		#	alias {{app.webpath}}/;
		#}

		# always redirect into Vue...
		location / {
			try_files $uri $uri/ /index.html =404;
		}

		# ... except for these static resources:
		location /static/ {
			#access_log off;
			expires 1M;
			add_header Cache-Control "public";
		}

		# proxy backend
		location /api/ {
			#proxy_pass http://127.0.0.1:8080;
			proxy_pass http://app;

			# keep-alive
			proxy_http_version 1.1;
			proxy_set_header Connection "";

			# lower timeouts
			proxy_connect_timeout 5s;
			proxy_read_timeout 5s;

			# turn off buffering of requests and responses; let the Go HTTP server handle that (requires proxy_http_version to be set to 1.1)
			proxy_request_buffering off;
			proxy_buffering off;

			# headers
			proxy_set_header HOST $host;
			proxy_set_header X-Forwarded-Proto $scheme;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

			# websockets
			#proxy_set_header   Upgrade $http_upgrade;
			#proxy_set_header   Connection "Upgrade";
			#proxy_read_timeout 86400;
		}

		# static files (meant for static resources in the backend, not used right now)
		#location /api-static/ {
		#	alias {{app.base}}/static/;
		#}
	}
}
