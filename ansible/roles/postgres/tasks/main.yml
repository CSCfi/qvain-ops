---

#- name: Install Postgresql repository
#  yum_repository:
#    name: postgresql
#    description: Postresql
#    baseurl: https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-7.3-x86_64/
#    gpgcheck: no
#    state: present

- name: Install Postgresql yum repository package
  yum: name=https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-7-x86_64/pgdg-centos96-9.6-3.noarch.rpm state=present
  when: deployment_environment_id != 'production'

- name: Install PostgreSQL 9 and python psycopg2
  yum:
    name: ['postgresql96', 'postgresql96-server', 'postgresql96-contrib', 'python-psycopg2']
    state: present

- name: Create database data directory
  file: path={{ item }} state=directory owner=postgres group=postgres mode=700
  with_items:
    - "{{ pg_data_path }}"

- name: Initialize Postgres database cluster
  command: /usr/pgsql-9.6/bin/pg_ctl initdb -D {{ pg_data_path }} creates={{ pg_data_path }}/postgresql.conf
  become_user: postgres

- name: Shutdown Postgresql
  systemd: name=postgresql-9.6 enabled=yes state=stopped

#- name: Create custom Postgres service file that refers to the original one and set correct PGDATA location
#  copy:
#    dest: /etc/systemd/system/postgresql-9.6.service
#    content: |
#      .include /lib/systemd/system/postgresql-9.6.service
#      [Service]
#      Environment=PGDATA={{ pg_data_path }}

- name: Create systemd override directory for postgresql
  file:
    path: /etc/systemd/system/postgresql-9.6.service.d
    state: directory

- name: Add systemd override for postgresql PGDATA path
  copy:
    content: |
      [Service]
      Environment=PGDATA={{ pg_data_path }}
    dest: /etc/systemd/system/postgresql-9.6.service.d/pgdata.conf

- name: Systemctl daemon-reload
  shell: "systemctl daemon-reload"

- name: Copy Postgres host based authentication configuration
  template: src=templates/pg_hba.conf dest={{ pg_data_path }}/pg_hba.conf owner=postgres group=postgres

# -wvh- only unix sockets, but leave tcp on localhost
#- name: Change Postgres configuration listen_address to all
#  lineinfile:
#    dest: "{{ pg_data_path }}/postgresql.conf"
#    state: present
#    regexp: "listen_addresses ="
#    line: "listen_addresses = '*'"

- name: Change Postgres configuration log_timezone to Europe/Helsinki
  lineinfile:
    dest: "{{ pg_data_path }}/postgresql.conf"
    state: present
    regexp: "log_timezone ="
    line: "log_timezone = 'Europe/Helsinki'"

- name: Change Postgres configuration timezone to Europe/Helsinki
  lineinfile:
    dest: "{{ pg_data_path }}/postgresql.conf"
    state: present
    regexp: "timezone ="
    line: "timezone = 'Europe/Helsinki'"

- name: Change Postgres configuration client_encoding UTF8
  lineinfile:
    dest: "{{ pg_data_path }}/postgresql.conf"
    state: present
    regexp: "client_encoding ="
    line: "client_encoding = 'UTF8'"

# just use English
- name: Change Postgres configuration lc_messages to English
  lineinfile:
    dest: "{{ pg_data_path }}/postgresql.conf"
    state: present
    regexp: "lc_messages ="
    line: "lc_messages = 'en_GB.utf8'"

# Don't mess with locale here.
# We don't want to get confusing semi-localised notifications from the database level,
# translations and localised formatting are a UI problem.
# We set collate and ctype to Finnish/Scandinavian settings on database creation, below;
# those might be necessary to get umlauts sorted correctly.
- name: Change Postgres configuration lc_monetary to C
  lineinfile:
    dest: "{{ pg_data_path }}/postgresql.conf"
    state: present
    regexp: "lc_monetary ="
    line: "lc_monetary = 'C'"

- name: Change Postgres configuration lc_numeric to C
  lineinfile:
    dest: "{{ pg_data_path }}/postgresql.conf"
    state: present
    regexp: "lc_numeric ="
    line: "lc_numeric = 'C'"

- name: Change Postgres configuration lc_time to C
  lineinfile:
    dest: "{{ pg_data_path }}/postgresql.conf"
    state: present
    regexp: "lc_time ="
    line: "lc_time = 'C'"

- name: Change Postgres configuration default_text_search_config to Finnish
  lineinfile:
    dest: "{{ pg_data_path }}/postgresql.conf"
    state: present
    regexp: "default_text_search_config ="
    line: "default_text_search_config = 'pg_catalog.finnish'"

- name: Optimise Postgres WAL for larger machines
  block:
    - name: Increase checkpoint timeout
      # increase x3
      lineinfile:
        dest: "{{ pg_data_path }}/postgresql.conf"
        state: present
        regexp: "checkpoint_timeout ="
        line: "checkpoint_timeout = 15min"
    - name: Increase max WAL size
      # we don't expect a hugh WAL size, so increase in line with checkpoint timeout
      lineinfile:
        dest: "{{ pg_data_path }}/postgresql.conf"
        state: present
        regexp: "max_wal_size ="
        line: "max_wal_size = 3GB"
    - name: Adapt checkpoint completion target to checkpoint timeout
      # (ct - 2min) / ct = 86.666 = ~0.8 (check also vm.dirty_expire_centisecs)
      lineinfile:
        dest: "{{ pg_data_path }}/postgresql.conf"
        state: present
        regexp: "checkpoint_completion_target ="
        line: "checkpoint_completion_target = 0.8"

- name: Optimise Postgres configuration shared_buffers
  lineinfile:
    dest: "{{ pg_data_path }}/postgresql.conf"
    state: present
    regexp: "shared_buffers ="
    line: "shared_buffers = '{{ (ansible_memtotal_mb*0.25) | int }}MB'"

- name: Optimise Postgres configuration effective_cache_size
  lineinfile:
    dest: "{{ pg_data_path }}/postgresql.conf"
    state: present
    regexp: "effective_cache_size ="
    line: "effective_cache_size = '{{ (ansible_memtotal_mb*0.75) | int }}MB'"

- name: Restart Postgresql
  systemd: name=postgresql-9.6 state=restarted daemon_reload=yes

- block:
    - name: Ensure app database user exists
      postgresql_user: name={{ database.user }} password={{ database.hashed }} encrypted=true state=present

    - name: Ensure app database is present
      postgresql_db: template=template0 db={{ database.name }} state=present owner={{ database.user }} encoding=UTF-8 lc_collate=fi_FI.UTF-8 lc_ctype=fi_FI.UTF-8

    - name: Remove unnecessary privileges from others
      postgresql_privs: db={{ database.name }} role=PUBLIC type=database priv=ALL state=absent

  become_user: postgres
